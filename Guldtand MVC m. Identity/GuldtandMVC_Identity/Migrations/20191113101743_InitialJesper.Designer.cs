// <auto-generated />
using System;
using GuldtandMVC_Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GuldtandMVC_Identity.Migrations
{
    [DbContext(typeof(prj4databaseContext))]
    [Migration("20191113101743_InitialJesper")]
    partial class InitialJesper
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Abningstid", b =>
                {
                    b.Property<string>("Ugedag")
                        .HasColumnName("ugedag")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<TimeSpan?>("AbenFra")
                        .HasColumnName("aben_fra");

                    b.Property<TimeSpan?>("AbenTil")
                        .HasColumnName("aben_til");

                    b.Property<int>("ButikId")
                        .HasColumnName("butik_id");

                    b.HasKey("Ugedag")
                        .HasName("PK__Abningst__363950E8F57F7389");

                    b.HasIndex("ButikId");

                    b.ToTable("Abningstid");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Butik", b =>
                {
                    b.Property<int>("ButikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("butikID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasColumnName("addresse")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Butiknavn")
                        .IsRequired()
                        .HasColumnName("butiknavn")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("VareId")
                        .HasColumnName("vareID");

                    b.HasKey("ButikId");

                    b.HasIndex("VareId");

                    b.ToTable("Butik");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.IngredientList", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ingredient_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("AmountUnit")
                        .HasColumnName("amount_unit")
                        .HasMaxLength(255);

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnName("ingredient_name")
                        .HasMaxLength(255);

                    b.Property<int?>("ProductRef")
                        .HasColumnName("product_ref");

                    b.Property<int?>("Recipe")
                        .HasColumnName("recipe");

                    b.HasKey("IngredientId")
                        .HasName("PK__ingredie__B0E453CF81168D6F");

                    b.HasIndex("ProductRef");

                    b.HasIndex("Recipe");

                    b.ToTable("ingredient_list");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Kategori", b =>
                {
                    b.Property<string>("Kategori1")
                        .HasColumnName("kategori")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Kategori1")
                        .HasName("PK__Kategori__BFBCD94401F34AC9");

                    b.ToTable("Kategori");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.NyVare", b =>
                {
                    b.Property<int>("VareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vareID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Butik")
                        .HasColumnName("butik")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ImgSrc")
                        .HasColumnName("img_src")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Navn")
                        .HasColumnName("navn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Pris")
                        .HasColumnName("pris");

                    b.Property<DateTime>("ValidFra")
                        .HasColumnName("valid_fra")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTil")
                        .HasColumnName("valid_til")
                        .HasColumnType("datetime");

                    b.Property<int>("Volumen")
                        .HasColumnName("volumen");

                    b.Property<double?>("Volumenpris")
                        .HasColumnName("volumenpris");

                    b.HasKey("VareId")
                        .HasName("PK__NyVare__0A039BF99CA62479");

                    b.ToTable("NyVare");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Opskrift", b =>
                {
                    b.Property<int>("OpskriftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opskriftID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasColumnName("beskrivelse")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<double>("Besparelse")
                        .HasColumnName("besparelse");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnName("navn")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<double>("Pris")
                        .HasColumnName("pris");

                    b.HasKey("OpskriftId");

                    b.ToTable("Opskrift");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.OpskriftKategori", b =>
                {
                    b.Property<int>("OpskriftId")
                        .HasColumnName("opskriftID");

                    b.Property<string>("Kategori")
                        .HasColumnName("kategori")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("OpskriftId", "Kategori")
                        .HasName("PK__Opskrift__869396F91D4CBD8D");

                    b.HasIndex("Kategori");

                    b.ToTable("OpskriftKategori");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.PrefsCategories", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasMaxLength(255);

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasMaxLength(255);

                    b.HasKey("Username", "Category")
                        .HasName("PK_prefs_cat");

                    b.ToTable("prefs_categories");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.PrefsChains", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasMaxLength(255);

                    b.Property<string>("RetailChain")
                        .HasColumnName("retail_chain")
                        .HasMaxLength(255);

                    b.HasKey("Username", "RetailChain");

                    b.HasIndex("RetailChain");

                    b.ToTable("prefs_chains");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("AmountUnit")
                        .IsRequired()
                        .HasColumnName("amount_unit")
                        .HasMaxLength(255);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(255);

                    b.Property<decimal?>("PricePrAmount")
                        .HasColumnName("price_pr_amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("PriceRegular")
                        .HasColumnName("price_regular")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnName("price_sale")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("RetailChain")
                        .IsRequired()
                        .HasColumnName("retail_chain")
                        .HasMaxLength(255);

                    b.Property<decimal?>("SavingsAbsolute")
                        .HasColumnName("savings_absolute")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("SavingsPercent")
                        .HasColumnName("savings_percent")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("ProductId")
                        .HasName("PK__products__47027DF5D8A01FFD");

                    b.HasIndex("RetailChain");

                    b.ToTable("products");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Recipes", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("recipe_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(255);

                    b.Property<string>("Directions")
                        .IsRequired()
                        .HasColumnName("directions")
                        .HasMaxLength(4000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(255);

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("SavingsAbsolute")
                        .HasColumnName("savings_absolute")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("SavingsPercent")
                        .HasColumnName("savings_percent")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("Servings")
                        .HasColumnName("servings");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("RecipeId")
                        .HasName("PK__recipes__3571ED9B43F6CF7A");

                    b.ToTable("recipes");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.RetailChains", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(255);

                    b.HasKey("Name")
                        .HasName("PK__retail_c__72E12F1ADAE2682D");

                    b.ToTable("retail_chains");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Stores", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasMaxLength(255);

                    b.Property<string>("Hours")
                        .HasColumnName("hours")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(255);

                    b.Property<string>("RetailChain")
                        .IsRequired()
                        .HasColumnName("retail_chain")
                        .HasMaxLength(255);

                    b.HasKey("StoreId")
                        .HasName("PK__stores__A2F2A30C987F6792");

                    b.HasIndex("RetailChain");

                    b.ToTable("stores");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Subscriptions", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasMaxLength(255);

                    b.Property<int>("Recipe")
                        .HasColumnName("recipe");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnName("max_price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Username", "Recipe");

                    b.HasIndex("Recipe");

                    b.ToTable("subscriptions");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Vare", b =>
                {
                    b.Property<int>("VareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vareID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Butik")
                        .HasColumnName("butik")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Imgsrc")
                        .HasColumnName("imgsrc")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Navn")
                        .HasColumnName("navn")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<double?>("Pris")
                        .HasColumnName("pris");

                    b.Property<string>("ValidFra")
                        .HasColumnName("valid_fra")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ValidTil")
                        .HasColumnName("valid_til")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Volumen")
                        .HasColumnName("volumen");

                    b.Property<double?>("Volumenpris")
                        .HasColumnName("volumenpris");

                    b.HasKey("VareId");

                    b.ToTable("Vare");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.VareKategori", b =>
                {
                    b.Property<int>("VareId")
                        .HasColumnName("vareID");

                    b.Property<string>("Kategori")
                        .HasColumnName("kategori")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("VareId", "Kategori")
                        .HasName("PK__VareKate__51F8566D62A76F18");

                    b.HasIndex("Kategori");

                    b.ToTable("VareKategori");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(255);

                    b.ToTable("users");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Abningstid", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.Butik", "Butik")
                        .WithMany("Abningstid")
                        .HasForeignKey("ButikId")
                        .HasConstraintName("FK__Abningsti__butik__0C70CFB4")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Butik", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.Vare", "Vare")
                        .WithMany("ButikNavigation")
                        .HasForeignKey("VareId")
                        .HasConstraintName("FK__Butik__vareID__09946309");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.IngredientList", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.Products", "ProductRefNavigation")
                        .WithMany("IngredientList")
                        .HasForeignKey("ProductRef")
                        .HasConstraintName("FK_ingredients_products");

                    b.HasOne("GuldtandMVC_Identity.Models.Recipes", "RecipeNavigation")
                        .WithMany("IngredientList")
                        .HasForeignKey("Recipe")
                        .HasConstraintName("FK_ingredients_recipe");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.OpskriftKategori", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.Kategori", "KategoriNavigation")
                        .WithMany("OpskriftKategori")
                        .HasForeignKey("Kategori")
                        .HasConstraintName("FK__OpskriftK__kateg__06B7F65E")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuldtandMVC_Identity.Models.Opskrift", "Opskrift")
                        .WithMany("OpskriftKategori")
                        .HasForeignKey("OpskriftId")
                        .HasConstraintName("FK__OpskriftK__opskr__05C3D225")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.PrefsCategories", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.ApplicationUser", "UsernameNavigation")
                        .WithMany("PrefsCategories")
                        .HasForeignKey("Username")
                        .HasConstraintName("FK_pref_cat_username");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.PrefsChains", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.RetailChains", "RetailChainNavigation")
                        .WithMany("PrefsChains")
                        .HasForeignKey("RetailChain")
                        .HasConstraintName("FK_prefs_chains_chains");

                    b.HasOne("GuldtandMVC_Identity.Models.ApplicationUser", "UsernameNavigation")
                        .WithMany("PrefsChains")
                        .HasForeignKey("Username")
                        .HasConstraintName("FK_prefs_chains_username");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Products", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.RetailChains", "RetailChainNavigation")
                        .WithMany("Products")
                        .HasForeignKey("RetailChain")
                        .HasConstraintName("FK_product_chain");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Stores", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.RetailChains", "RetailChainNavigation")
                        .WithMany("Stores")
                        .HasForeignKey("RetailChain")
                        .HasConstraintName("FK_stores_chains");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.Subscriptions", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.Recipes", "RecipeNavigation")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Recipe")
                        .HasConstraintName("FK_sub_recipe");

                    b.HasOne("GuldtandMVC_Identity.Models.ApplicationUser", "UsernameNavigation")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Username")
                        .HasConstraintName("FK_sub_username");
                });

            modelBuilder.Entity("GuldtandMVC_Identity.Models.VareKategori", b =>
                {
                    b.HasOne("GuldtandMVC_Identity.Models.Kategori", "KategoriNavigation")
                        .WithMany("VareKategori")
                        .HasForeignKey("Kategori")
                        .HasConstraintName("FK__VareKateg__kateg__00FF1D08")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuldtandMVC_Identity.Models.NyVare", "Vare")
                        .WithMany("VareKategori")
                        .HasForeignKey("VareId")
                        .HasConstraintName("FK__VareKateg__vareI__000AF8CF")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
